!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ARROW_DOWN_KEY	cmd/cmdCharDef.h	/^   ARROW_DOWN_KEY   = 66 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_DOWN_KEY	cmd/cmdCharDef.h	/^   ARROW_DOWN_KEY   = TA_ARROW_DOWN_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	cmd/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = ARROW_UP_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	cmd/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = TA_ARROW_KEY_BEGIN,$/;"	e	enum:ParseChar
ARROW_KEY_END	cmd/cmdCharDef.h	/^   ARROW_KEY_END    = ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_END	cmd/cmdCharDef.h	/^   ARROW_KEY_END    = TA_ARROW_KEY_END,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	cmd/cmdCharDef.h	/^   ARROW_KEY_FLAG   = 1 << 8,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	cmd/cmdCharDef.h	/^   ARROW_KEY_FLAG   = TA_ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_KEY_INT	cmd/cmdCharDef.h	/^   ARROW_KEY_INT    = 91,$/;"	e	enum:ParseChar
ARROW_KEY_INT	cmd/cmdCharDef.h	/^   ARROW_KEY_INT    = TA_ARROW_KEY_INT,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	cmd/cmdCharDef.h	/^   ARROW_LEFT_KEY   = 68 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	cmd/cmdCharDef.h	/^   ARROW_LEFT_KEY   = TA_ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	cmd/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = 67 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	cmd/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = TA_ARROW_RIGHT_KEY,$/;"	e	enum:ParseChar
ARROW_UP_KEY	cmd/cmdCharDef.h	/^   ARROW_UP_KEY     = 65 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_UP_KEY	cmd/cmdCharDef.h	/^   ARROW_UP_KEY     = TA_ARROW_UP_KEY,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	cmd/cmdCharDef.h	/^   BACK_SPACE_CHAR  = 8,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	cmd/cmdCharDef.h	/^   BACK_SPACE_CHAR  = TA_BACK_SPACE_CHAR,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	cmd/cmdCharDef.h	/^   BACK_SPACE_KEY   = 127,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	cmd/cmdCharDef.h	/^   BACK_SPACE_KEY   = TA_BACK_SPACE_KEY,$/;"	e	enum:ParseChar
BEEP_CHAR	cmd/cmdCharDef.h	/^   BEEP_CHAR        = 7,$/;"	e	enum:ParseChar
BEEP_CHAR	cmd/cmdCharDef.h	/^   BEEP_CHAR        = TA_BEEP_CHAR,$/;"	e	enum:ParseChar
CMD_CHAR_DEF_H	cmd/cmdCharDef.h	9;"	d
CMD_COMMON_H	cmd/cmdCommon.h	9;"	d
CMD_EXEC_DONE	cmd/cmdParser.h	/^   CMD_EXEC_DONE  = 0,$/;"	e	enum:CmdExecStatus
CMD_EXEC_ERROR	cmd/cmdParser.h	/^   CMD_EXEC_ERROR = 1,$/;"	e	enum:CmdExecStatus
CMD_EXEC_NOP	cmd/cmdParser.h	/^   CMD_EXEC_NOP   = 3,$/;"	e	enum:CmdExecStatus
CMD_EXEC_QUIT	cmd/cmdParser.h	/^   CMD_EXEC_QUIT  = 2,$/;"	e	enum:CmdExecStatus
CMD_EXEC_TOT	cmd/cmdParser.h	/^   CMD_EXEC_TOT$/;"	e	enum:CmdExecStatus
CMD_OPT_ERROR_TOT	cmd/cmdParser.h	/^   CMD_OPT_ERROR_TOT$/;"	e	enum:CmdOptionError
CMD_OPT_EXTRA	cmd/cmdParser.h	/^   CMD_OPT_EXTRA      = 1,$/;"	e	enum:CmdOptionError
CMD_OPT_FOPEN_FAIL	cmd/cmdParser.h	/^   CMD_OPT_FOPEN_FAIL = 3,$/;"	e	enum:CmdOptionError
CMD_OPT_ILLEGAL	cmd/cmdParser.h	/^   CMD_OPT_ILLEGAL    = 2,$/;"	e	enum:CmdOptionError
CMD_OPT_MISSING	cmd/cmdParser.h	/^   CMD_OPT_MISSING    = 0,$/;"	e	enum:CmdOptionError
CMD_PARSER_H	cmd/cmdParser.h	9;"	d
CmdClass	cmd/cmdParser.h	89;"	d
CmdExec	cmd/cmdParser.h	/^   CmdExec() {}$/;"	f	class:CmdExec
CmdExec	cmd/cmdParser.h	/^class CmdExec$/;"	c
CmdExecStatus	cmd/cmdParser.h	/^enum CmdExecStatus$/;"	g
CmdMap	cmd/cmdParser.h	/^typedef map<const string, CmdExec*>   CmdMap;$/;"	t	class:CmdParser
CmdOptionError	cmd/cmdParser.h	/^enum CmdOptionError$/;"	g
CmdParser	cmd/cmdParser.h	/^   CmdParser(const string& p) : _prompt(p), _dofile(0),$/;"	f	class:CmdParser
CmdParser	cmd/cmdParser.h	/^class CmdParser$/;"	c
CmdRegPair	cmd/cmdParser.h	/^typedef pair<const string, CmdExec*>  CmdRegPair;$/;"	t	class:CmdParser
DELETE_KEY	cmd/cmdCharDef.h	/^   DELETE_KEY       = 51 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
DELETE_KEY	cmd/cmdCharDef.h	/^   DELETE_KEY       = TA_DELETE_KEY,$/;"	e	enum:ParseChar
DOFILE_STACK_LIMIT	cmd/cmdParser.cpp	62;"	d	file:
DofileCmd	cmd/cmdCommon.h	/^CmdClass(DofileCmd);$/;"	v
END_KEY	cmd/cmdCharDef.h	/^   END_KEY          = 52 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
END_KEY	cmd/cmdCharDef.h	/^   END_KEY          = TA_END_KEY,$/;"	e	enum:ParseChar
ESC_KEY	cmd/cmdCharDef.h	/^   ESC_KEY          = 27,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
ESC_KEY	cmd/cmdCharDef.h	/^   ESC_KEY          = TA_ESC_KEY,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
HOME_KEY	cmd/cmdCharDef.h	/^   HOME_KEY         = 49 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
HOME_KEY	cmd/cmdCharDef.h	/^   HOME_KEY         = TA_HOME_KEY,$/;"	e	enum:ParseChar
HelpCmd	cmd/cmdCommon.h	/^CmdClass(HelpCmd);$/;"	v
HistoryCmd	cmd/cmdCommon.h	/^CmdClass(HistoryCmd);$/;"	v
INPUT_END_KEY	cmd/cmdCharDef.h	/^   INPUT_END_KEY    = 4,          \/\/ ctrl-d$/;"	e	enum:ParseChar
INPUT_END_KEY	cmd/cmdCharDef.h	/^   INPUT_END_KEY    = TA_INPUT_END_KEY,   \/\/ ctrl-d$/;"	e	enum:ParseChar
INSERT_KEY	cmd/cmdCharDef.h	/^   INSERT_KEY       = 50 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
INSERT_KEY	cmd/cmdCharDef.h	/^   INSERT_KEY       = TA_INSERT_KEY,$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	cmd/cmdCharDef.h	/^   LINE_BEGIN_KEY   = 1,          \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	cmd/cmdCharDef.h	/^   LINE_BEGIN_KEY   = TA_LINE_BEGIN_KEY,  \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_END_KEY	cmd/cmdCharDef.h	/^   LINE_END_KEY     = 5,          \/\/ ctrl-e$/;"	e	enum:ParseChar
LINE_END_KEY	cmd/cmdCharDef.h	/^   LINE_END_KEY     = TA_LINE_END_KEY,    \/\/ ctrl-e$/;"	e	enum:ParseChar
MEM_CMD_H	mem/memCmd.h	9;"	d
MEM_MGR_H	mem/memMgr.h	10;"	d
MEM_MGR_INIT	mem/memMgr.h	25;"	d
MEM_TEST_H	mem/memTest.h	9;"	d
MOD_KEY_BEGIN	cmd/cmdCharDef.h	/^   MOD_KEY_BEGIN    = HOME_KEY,$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	cmd/cmdCharDef.h	/^   MOD_KEY_BEGIN    = TA_MOD_KEY_BEGIN,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	cmd/cmdCharDef.h	/^   MOD_KEY_DUMMY    = 126,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	cmd/cmdCharDef.h	/^   MOD_KEY_DUMMY    = TA_MOD_KEY_DUMMY,$/;"	e	enum:ParseChar
MOD_KEY_END	cmd/cmdCharDef.h	/^   MOD_KEY_END      = PG_DOWN_KEY,$/;"	e	enum:ParseChar
MOD_KEY_END	cmd/cmdCharDef.h	/^   MOD_KEY_END      = TA_MOD_KEY_END,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	cmd/cmdCharDef.h	/^   MOD_KEY_FLAG     = 1 << 9,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	cmd/cmdCharDef.h	/^   MOD_KEY_FLAG     = TA_MOD_KEY_FLAG,$/;"	e	enum:ParseChar
MOD_KEY_INT	cmd/cmdCharDef.h	/^   MOD_KEY_INT      = 91,$/;"	e	enum:ParseChar
MOD_KEY_INT	cmd/cmdCharDef.h	/^   MOD_KEY_INT      = TA_MOD_KEY_INT,$/;"	e	enum:ParseChar
MTDeleteCmd	mem/memCmd.h	/^CmdClass(MTDeleteCmd);$/;"	v
MTNewCmd	mem/memCmd.h	/^CmdClass(MTNewCmd);$/;"	v
MTPrintCmd	mem/memCmd.h	/^CmdClass(MTPrintCmd);$/;"	v
MTResetCmd	mem/memCmd.h	/^CmdClass(MTResetCmd);$/;"	v
MYCLK_TCK	util/myUsage.h	21;"	d
MYCLK_TCK	util/myUsage.h	22;"	d
MY_USAGE_H	util/myUsage.h	10;"	d
MemBlock	mem/memMgr.h	/^   MemBlock(MemBlock<T>* n, size_t b) : _nextBlock(n) {$/;"	f	class:MemBlock
MemBlock	mem/memMgr.h	/^class MemBlock$/;"	c
MemMgr	mem/memMgr.h	/^   MemMgr(size_t b = 65536) : _blockSize(b) {$/;"	f	class:MemMgr
MemMgr	mem/memMgr.h	/^class MemMgr$/;"	c
MemRecycleList	mem/memMgr.h	/^   MemRecycleList(size_t a = 0) : _arrSize(a), _first(0), _nextList(0) {}$/;"	f	class:MemRecycleList
MemRecycleList	mem/memMgr.h	/^class MemRecycleList$/;"	c
MemTest	mem/memTest.h	/^   MemTest() { _objList.reserve(1024); _arrList.reserve(1024); }$/;"	f	class:MemTest
MemTest	mem/memTest.h	/^class MemTest$/;"	c
MemTestObj	mem/memTest.h	/^   MemTestObj() {}$/;"	f	class:MemTestObj
MemTestObj	mem/memTest.h	/^class MemTestObj$/;"	c
MyUsage	util/myUsage.h	/^   MyUsage() { reset(); }$/;"	f	class:MyUsage
MyUsage	util/myUsage.h	/^class MyUsage$/;"	c
NEWLINE_KEY	cmd/cmdCharDef.h	/^   NEWLINE_KEY      = TA_NEWLINE_KEY,     \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
NEWLINE_KEY	cmd/cmdCharDef.h	/^   NEWLINE_KEY      = int('\\n'),  \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
PARSE_CHAR_END	cmd/cmdCharDef.h	/^   PARSE_CHAR_END$/;"	e	enum:ParseChar
PG_DOWN_KEY	cmd/cmdCharDef.h	/^   PG_DOWN_KEY      = 54 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_DOWN_KEY	cmd/cmdCharDef.h	/^   PG_DOWN_KEY      = TA_PG_DOWN_KEY,$/;"	e	enum:ParseChar
PG_OFFSET	cmd/cmdParser.h	109;"	d
PG_UP_KEY	cmd/cmdCharDef.h	/^   PG_UP_KEY        = 53 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_UP_KEY	cmd/cmdCharDef.h	/^   PG_UP_KEY        = TA_PG_UP_KEY,$/;"	e	enum:ParseChar
ParseChar	cmd/cmdCharDef.h	/^enum ParseChar$/;"	g
QuitCmd	cmd/cmdCommon.h	/^CmdClass(QuitCmd);$/;"	v
READ_BUF_SIZE	cmd/cmdParser.h	107;"	d
RN_GEN_H	util/rnGen.h	9;"	d
R_SIZE	mem/memMgr.h	55;"	d
RandomNumGen	util/rnGen.h	/^      RandomNumGen() { my_srandom(getpid()); }$/;"	f	class:RandomNumGen
RandomNumGen	util/rnGen.h	/^      RandomNumGen(unsigned seed) { my_srandom(seed); }$/;"	f	class:RandomNumGen
RandomNumGen	util/rnGen.h	/^class RandomNumGen$/;"	c
S	mem/memMgr.h	176;"	d
SIZE_T	mem/memMgr.h	39;"	d
SIZE_T_1	mem/memMgr.h	40;"	d
TAB_KEY	cmd/cmdCharDef.h	/^   TAB_KEY          = TA_TAB_KEY,         \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_KEY	cmd/cmdCharDef.h	/^   TAB_KEY          = int('\\t'),  \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_POSITION	cmd/cmdParser.h	108;"	d
TA_ARROW_DOWN_KEY	cmd/cmdCharDef.h	25;"	d
TA_ARROW_KEY_BEGIN	cmd/cmdCharDef.h	28;"	d
TA_ARROW_KEY_END	cmd/cmdCharDef.h	29;"	d
TA_ARROW_KEY_FLAG	cmd/cmdCharDef.h	22;"	d
TA_ARROW_KEY_INT	cmd/cmdCharDef.h	23;"	d
TA_ARROW_LEFT_KEY	cmd/cmdCharDef.h	27;"	d
TA_ARROW_RIGHT_KEY	cmd/cmdCharDef.h	26;"	d
TA_ARROW_UP_KEY	cmd/cmdCharDef.h	24;"	d
TA_BACK_SPACE_CHAR	cmd/cmdCharDef.h	43;"	d
TA_BACK_SPACE_KEY	cmd/cmdCharDef.h	21;"	d
TA_BEEP_CHAR	cmd/cmdCharDef.h	42;"	d
TA_DELETE_KEY	cmd/cmdCharDef.h	34;"	d
TA_END_KEY	cmd/cmdCharDef.h	35;"	d
TA_ESC_KEY	cmd/cmdCharDef.h	20;"	d
TA_HOME_KEY	cmd/cmdCharDef.h	32;"	d
TA_INPUT_END_KEY	cmd/cmdCharDef.h	17;"	d
TA_INSERT_KEY	cmd/cmdCharDef.h	33;"	d
TA_LINE_BEGIN_KEY	cmd/cmdCharDef.h	15;"	d
TA_LINE_END_KEY	cmd/cmdCharDef.h	16;"	d
TA_MOD_KEY_BEGIN	cmd/cmdCharDef.h	38;"	d
TA_MOD_KEY_DUMMY	cmd/cmdCharDef.h	40;"	d
TA_MOD_KEY_END	cmd/cmdCharDef.h	39;"	d
TA_MOD_KEY_FLAG	cmd/cmdCharDef.h	30;"	d
TA_MOD_KEY_INT	cmd/cmdCharDef.h	31;"	d
TA_NEWLINE_KEY	cmd/cmdCharDef.h	19;"	d
TA_PG_DOWN_KEY	cmd/cmdCharDef.h	37;"	d
TA_PG_UP_KEY	cmd/cmdCharDef.h	36;"	d
TA_TAB_KEY	cmd/cmdCharDef.h	18;"	d
TA_UNDEFINED_KEY	cmd/cmdCharDef.h	41;"	d
UNDEFINED_KEY	cmd/cmdCharDef.h	/^   UNDEFINED_KEY    = TA_UNDEFINED_KEY,$/;"	e	enum:ParseChar
UNDEFINED_KEY	cmd/cmdCharDef.h	/^   UNDEFINED_KEY  = INT_MAX,$/;"	e	enum:ParseChar
USE_MEM_MGR	mem/memMgr.h	28;"	d
UTIL_H	util/util.h	9;"	d
UsageCmd	cmd/cmdCommon.h	/^CmdClass(UsageCmd);$/;"	v
_activeBlock	mem/memMgr.h	/^   MemBlock<T>*               _activeBlock;$/;"	m	class:MemMgr
_arrList	mem/memTest.h	/^   vector<MemTestObj*>   _arrList;$/;"	m	class:MemTest
_arrSize	mem/memMgr.h	/^   size_t              _arrSize;   \/\/ the array size of the recycled data$/;"	m	class:MemRecycleList
_begin	mem/memMgr.h	/^   char*             _begin;$/;"	m	class:MemBlock
_blockSize	mem/memMgr.h	/^   size_t                     _blockSize;$/;"	m	class:MemMgr
_cmdMap	cmd/cmdParser.h	/^   CmdMap    _cmdMap;                \/\/ map from string to command$/;"	m	class:CmdParser
_currentMem	util/myUsage.h	/^   double     _currentMem;$/;"	m	class:MyUsage
_currentTick	util/myUsage.h	/^   double     _currentTick;$/;"	m	class:MyUsage
_dataC	mem/memTest.h	/^   char  _dataC[2];$/;"	m	class:MemTestObj
_dataI	mem/memTest.h	/^   int   _dataI[8];$/;"	m	class:MemTestObj
_dofile	cmd/cmdParser.h	/^   ifstream* _dofile;                \/\/ for command script$/;"	m	class:CmdParser
_dofileStack	cmd/cmdParser.h	/^   stack<ifstream*> _dofileStack;    \/\/ For recursive dofile calling$/;"	m	class:CmdParser
_end	mem/memMgr.h	/^   char*             _end;$/;"	m	class:MemBlock
_first	mem/memMgr.h	/^   T*                  _first;     \/\/ the first recycled data$/;"	m	class:MemRecycleList
_history	cmd/cmdParser.h	/^   vector<string>   _history;        \/\/ oldest:_history[0],latest:_hist.back()$/;"	m	class:CmdParser
_historyIdx	cmd/cmdParser.h	/^   int              _historyIdx;     \/\/ (1) Position to insert history string$/;"	m	class:CmdParser
_initMem	util/myUsage.h	/^   double     _initMem;$/;"	m	class:MyUsage
_nextBlock	mem/memMgr.h	/^   MemBlock<T>*      _nextBlock;$/;"	m	class:MemBlock
_nextList	mem/memMgr.h	/^   MemRecycleList<T>*  _nextList;  \/\/ next MemRecycleList$/;"	m	class:MemRecycleList
_objList	mem/memTest.h	/^   vector<MemTestObj*>   _objList;$/;"	m	class:MemTest
_optCmd	cmd/cmdParser.h	/^   string            _optCmd;$/;"	m	class:CmdExec
_periodUsedTime	util/myUsage.h	/^   double     _periodUsedTime;$/;"	m	class:MyUsage
_prompt	cmd/cmdParser.h	/^   const string _prompt;             \/\/ command prompt$/;"	m	class:CmdParser
_ptr	mem/memMgr.h	/^   char*             _ptr;$/;"	m	class:MemBlock
_readBuf	cmd/cmdParser.h	/^   char      _readBuf[READ_BUF_SIZE];\/\/ save the current line input$/;"	m	class:CmdParser
_readBufEnd	cmd/cmdParser.h	/^   char*     _readBufEnd;            \/\/ end of string position of _readBuf$/;"	m	class:CmdParser
_readBufPtr	cmd/cmdParser.h	/^   char*     _readBufPtr;            \/\/ point to the cursor position$/;"	m	class:CmdParser
_recycleList	mem/memMgr.h	/^   MemRecycleList<T>          _recycleList[R_SIZE];$/;"	m	class:MemMgr
_tempCmdStored	cmd/cmdParser.h	/^   bool      _tempCmdStored;         \/\/ When up\/pgUp is pressed, current line$/;"	m	class:CmdParser
_totalUsedTime	util/myUsage.h	/^   double     _totalUsedTime;$/;"	m	class:MyUsage
addHistory	cmd/cmdReader.cpp	/^CmdParser::addHistory()$/;"	f	class:CmdParser
alloc	mem/memMgr.h	/^   T* alloc(size_t t) {$/;"	f	class:MemMgr
allocArr	mem/memMgr.h	/^   T* allocArr(size_t t) {$/;"	f	class:MemMgr
checkMem	util/myUsage.h	/^   double checkMem() const {$/;"	f	class:MyUsage
checkOptCmd	cmd/cmdParser.cpp	/^CmdExec::checkOptCmd(const string& check) const$/;"	f	class:CmdExec
checkTick	util/myUsage.h	/^   double checkTick() const {$/;"	f	class:MyUsage
closeDofile	cmd/cmdParser.cpp	/^CmdParser::closeDofile()$/;"	f	class:CmdParser
deleteArr	mem/memTest.h	/^   void deleteArr(size_t idx) {$/;"	f	class:MemTest
deleteChar	cmd/cmdReader.cpp	/^CmdParser::deleteChar()$/;"	f	class:CmdParser
deleteLine	cmd/cmdReader.cpp	/^CmdParser::deleteLine()$/;"	f	class:CmdParser
deleteObj	mem/memTest.h	/^   void deleteObj(size_t idx) {$/;"	f	class:MemTest
downtoSizeT	mem/memMgr.h	52;"	d
errorOption	cmd/cmdParser.cpp	/^CmdExec::errorOption(CmdOptionError err, const string& opt) const$/;"	f	class:CmdExec
exec	cmd/cmdCommon.cpp	/^DofileCmd::exec(const string& option)$/;"	f	class:DofileCmd
exec	cmd/cmdCommon.cpp	/^HelpCmd::exec(const string& option)$/;"	f	class:HelpCmd
exec	cmd/cmdCommon.cpp	/^HistoryCmd::exec(const string& option)$/;"	f	class:HistoryCmd
exec	cmd/cmdCommon.cpp	/^QuitCmd::exec(const string& option)$/;"	f	class:QuitCmd
exec	cmd/cmdCommon.cpp	/^UsageCmd::exec(const string& option)$/;"	f	class:UsageCmd
exec	mem/memCmd.cpp	/^MTDeleteCmd::exec(const string& option)$/;"	f	class:MTDeleteCmd
exec	mem/memCmd.cpp	/^MTNewCmd::exec(const string& option)$/;"	f	class:MTNewCmd
exec	mem/memCmd.cpp	/^MTPrintCmd::exec(const string& option)$/;"	f	class:MTPrintCmd
exec	mem/memCmd.cpp	/^MTResetCmd::exec(const string& option)$/;"	f	class:MTResetCmd
execOneCmd	cmd/cmdParser.cpp	/^CmdParser::execOneCmd()$/;"	f	class:CmdParser
free	mem/memMgr.h	/^   void  free(T* p) {$/;"	f	class:MemMgr
freeArr	mem/memMgr.h	/^   void  freeArr(T* p) {$/;"	f	class:MemMgr
getArrListSize	mem/memTest.h	/^   size_t getArrListSize() const { return _arrList.size(); }$/;"	f	class:MemTest
getArrSize	mem/memMgr.h	/^   size_t getArrSize() const { return _arrSize; }$/;"	f	class:MemRecycleList
getChar	cmd/cmdCharDef.cpp	/^CmdParser::getChar(istream& istr) const$/;"	f	class:CmdParser
getCmd	cmd/cmdParser.cpp	/^CmdParser::getCmd(string cmd)$/;"	f	class:CmdParser
getMem	mem/memMgr.h	/^   T* getMem(size_t t) {$/;"	f	class:MemMgr
getMem	mem/memMgr.h	/^   bool getMem(size_t t, T*& ret) {$/;"	f	class:MemBlock
getMemRecycleList	mem/memMgr.h	/^   MemRecycleList<T>* getMemRecycleList(size_t n) {$/;"	f	class:MemMgr
getNext	mem/memMgr.h	/^   T* getNext(T* p) const {$/;"	f	class:MemRecycleList
getNextBlock	mem/memMgr.h	/^   MemBlock<T>* getNextBlock() const { return _nextBlock; }$/;"	f	class:MemBlock
getNextList	mem/memMgr.h	/^   MemRecycleList<T>* getNextList() const { return _nextList; }$/;"	f	class:MemRecycleList
getNumBlocks	mem/memMgr.h	/^   size_t getNumBlocks() const {$/;"	f	class:MemMgr
getObjListSize	mem/memTest.h	/^   size_t getObjListSize() const { return _objList.size(); }$/;"	f	class:MemTest
getOptCmd	cmd/cmdParser.h	/^   const string& getOptCmd() const { return _optCmd; }$/;"	f	class:CmdExec
getRecycleIdx	mem/memMgr.h	/^   size_t getRecycleIdx(size_t t) const {$/;"	f	class:MemMgr
getRemainSize	mem/memMgr.h	/^   size_t getRemainSize() const { return size_t(_end - _ptr); }$/;"	f	class:MemBlock
help	cmd/cmdCommon.cpp	/^DofileCmd::help() const$/;"	f	class:DofileCmd
help	cmd/cmdCommon.cpp	/^HelpCmd::help() const$/;"	f	class:HelpCmd
help	cmd/cmdCommon.cpp	/^HistoryCmd::help() const$/;"	f	class:HistoryCmd
help	cmd/cmdCommon.cpp	/^QuitCmd::help() const$/;"	f	class:QuitCmd
help	cmd/cmdCommon.cpp	/^UsageCmd::help() const$/;"	f	class:UsageCmd
help	mem/memCmd.cpp	/^MTDeleteCmd::help() const$/;"	f	class:MTDeleteCmd
help	mem/memCmd.cpp	/^MTNewCmd::help() const$/;"	f	class:MTNewCmd
help	mem/memCmd.cpp	/^MTPrintCmd::help() const$/;"	f	class:MTPrintCmd
help	mem/memCmd.cpp	/^MTResetCmd::help() const$/;"	f	class:MTResetCmd
initCommonCmd	cmd/cmdCommon.cpp	/^initCommonCmd()$/;"	f
initMemCmd	mem/memCmd.cpp	/^initMemCmd()$/;"	f
insertChar	cmd/cmdReader.cpp	/^CmdParser::insertChar(char ch, int rep)$/;"	f	class:CmdParser
isValidVarName	util/myString.cpp	/^isValidVarName(const string& str)$/;"	f
lexOptions	cmd/cmdParser.cpp	/^CmdExec::lexOptions$/;"	f	class:CmdExec
lexSingleOption	cmd/cmdParser.cpp	/^CmdExec::lexSingleOption$/;"	f	class:CmdExec
listCmd	cmd/cmdParser.cpp	/^CmdParser::listCmd(const string& str)$/;"	f	class:CmdParser
main	main/main.cpp	/^main(int argc, char** argv)$/;"	f
moveBufPtr	cmd/cmdReader.cpp	/^CmdParser::moveBufPtr(char* const ptr)$/;"	f	class:CmdParser
moveToHistory	cmd/cmdReader.cpp	/^CmdParser::moveToHistory(int index)$/;"	f	class:CmdParser
mtest	mem/memTest.cpp	/^MemTest mtest;$/;"	v
myGetChar	util/myGetChar.cpp	/^char myGetChar()$/;"	f
myGetChar	util/myGetChar.cpp	/^char myGetChar(istream& istr)$/;"	f
myStr2Int	util/myString.cpp	/^myStr2Int(const string& str, int& num)$/;"	f
myStrGetTok	util/myString.cpp	/^myStrGetTok(const string& str, string& tok, size_t pos = 0,$/;"	f
myStrNCmp	util/myString.cpp	/^myStrNCmp(const string& s1, const string& s2, unsigned n)$/;"	f
myUsage	util/util.cpp	/^MyUsage       myUsage;$/;"	v
my_random	util/rnGen.h	17;"	d
my_srandom	util/rnGen.h	16;"	d
mybeep	cmd/cmdCharDef.cpp	/^void mybeep()$/;"	f
myexit	main/main.cpp	/^myexit()$/;"	f	file:
mygetc	cmd/cmdCharDef.cpp	/^char mygetc(istream& istr)$/;"	f
newArrs	mem/memTest.h	/^   void newArrs(size_t n, size_t s) {$/;"	f	class:MemTest
newObjs	mem/memTest.h	/^   void newObjs(size_t n) {$/;"	f	class:MemTest
numElm	mem/memMgr.h	/^   size_t numElm() const {$/;"	f	class:MemRecycleList
openDofile	cmd/cmdParser.cpp	/^CmdParser::openDofile(const string& dof)$/;"	f	class:CmdParser
operator ()	util/rnGen.h	/^      const int operator() (const int range) const {$/;"	f	class:RandomNumGen
parseCmd	cmd/cmdParser.cpp	/^CmdParser::parseCmd(string& option)$/;"	f	class:CmdParser
popDofile	cmd/cmdParser.cpp	/^CmdParser::popDofile()$/;"	f	class:CmdParser
popFront	mem/memMgr.h	/^   T* popFront() {$/;"	f	class:MemRecycleList
print	mem/memMgr.h	/^   void print() const {$/;"	f	class:MemMgr
print	mem/memTest.h	/^   void print() const {$/;"	f	class:MemTest
printHelps	cmd/cmdParser.cpp	/^CmdParser::printHelps() const$/;"	f	class:CmdParser
printHistory	cmd/cmdParser.cpp	/^CmdParser::printHistory(int nPrint) const$/;"	f	class:CmdParser
printPrompt	cmd/cmdParser.h	/^   void printPrompt() const { cout << _prompt; }$/;"	f	class:CmdParser
pushDofile	cmd/cmdParser.cpp	/^CmdParser::pushDofile()$/;"	f	class:CmdParser
pushFront	mem/memMgr.h	/^   void  pushFront(T* p) {$/;"	f	class:MemRecycleList
readCmd	cmd/cmdReader.cpp	/^CmdParser::readCmd(istream& istr)$/;"	f	class:CmdParser
regCmd	cmd/cmdParser.cpp	/^CmdParser::regCmd(const string& cmd, unsigned nCmp, CmdExec* e)$/;"	f	class:CmdParser
report	util/myUsage.h	/^   void report(bool repTime, bool repMem) {$/;"	f	class:MyUsage
reprintCmd	cmd/cmdReader.cpp	/^CmdParser::reprintCmd()$/;"	f	class:CmdParser
reset	mem/memMgr.h	/^   void reset() { _ptr = _begin; }$/;"	f	class:MemBlock
reset	mem/memMgr.h	/^   void reset() {$/;"	f	class:MemRecycleList
reset	mem/memMgr.h	/^   void reset(size_t b = 0) {$/;"	f	class:MemMgr
reset	mem/memTest.h	/^   void reset(size_t b = 0) {$/;"	f	class:MemTest
reset	util/myUsage.h	/^   void reset() {$/;"	f	class:MyUsage
resetBufAndPrintPrompt	cmd/cmdParser.h	/^   void resetBufAndPrintPrompt() {$/;"	f	class:CmdParser
reset_keypress	cmd/cmdCharDef.cpp	/^static void reset_keypress(void)$/;"	f	file:
reset_keypress	util/myGetChar.cpp	/^static void reset_keypress(void)$/;"	f	file:
retrieveHistory	cmd/cmdReader.cpp	/^CmdParser::retrieveHistory()$/;"	f	class:CmdParser
returnCh	cmd/cmdCharDef.cpp	/^returnCh(int ch)$/;"	f
setMemUsage	util/myUsage.h	/^   void setMemUsage() { _currentMem = checkMem() - _initMem; }$/;"	f	class:MyUsage
setNextList	mem/memMgr.h	/^   void setNextList(MemRecycleList<T>* l) { _nextList = l; }$/;"	f	class:MemRecycleList
setOptCmd	cmd/cmdParser.h	/^   void setOptCmd(const string& str) { _optCmd = str; }$/;"	f	class:CmdExec
setTimeUsage	util/myUsage.h	/^   void setTimeUsage() {$/;"	f	class:MyUsage
set_keypress	cmd/cmdCharDef.cpp	/^static void set_keypress(void)$/;"	f	file:
set_keypress	util/myGetChar.cpp	/^static void set_keypress(void)$/;"	f	file:
stored_settings	cmd/cmdCharDef.cpp	/^static struct termios stored_settings;$/;"	v	typeref:struct:termios	file:
stored_settings	util/myGetChar.cpp	/^static struct termios stored_settings;$/;"	v	typeref:struct:termios	file:
taTestOnly	cmd/cmdParser.h	/^   void taTestOnly() {}$/;"	f	class:CmdParser
toSizeT	mem/memMgr.h	48;"	d
usage	cmd/cmdCommon.cpp	/^DofileCmd::usage(ostream& os) const$/;"	f	class:DofileCmd
usage	cmd/cmdCommon.cpp	/^HelpCmd::usage(ostream& os) const$/;"	f	class:HelpCmd
usage	cmd/cmdCommon.cpp	/^HistoryCmd::usage(ostream& os) const$/;"	f	class:HistoryCmd
usage	cmd/cmdCommon.cpp	/^QuitCmd::usage(ostream& os) const$/;"	f	class:QuitCmd
usage	cmd/cmdCommon.cpp	/^UsageCmd::usage(ostream& os) const$/;"	f	class:UsageCmd
usage	main/main.cpp	/^usage()$/;"	f	file:
usage	mem/memCmd.cpp	/^MTDeleteCmd::usage(ostream& os) const$/;"	f	class:MTDeleteCmd
usage	mem/memCmd.cpp	/^MTNewCmd::usage(ostream& os) const$/;"	f	class:MTNewCmd
usage	mem/memCmd.cpp	/^MTPrintCmd::usage(ostream& os) const$/;"	f	class:MTPrintCmd
usage	mem/memCmd.cpp	/^MTResetCmd::usage(ostream& os) const$/;"	f	class:MTResetCmd
~CmdExec	cmd/cmdParser.h	/^   virtual ~CmdExec() {}$/;"	f	class:CmdExec
~CmdParser	cmd/cmdParser.h	/^   virtual ~CmdParser() {}$/;"	f	class:CmdParser
~MemBlock	mem/memMgr.h	/^   ~MemBlock() { delete [] _begin; }$/;"	f	class:MemBlock
~MemMgr	mem/memMgr.h	/^   ~MemMgr() { reset(); delete _activeBlock; }$/;"	f	class:MemMgr
~MemRecycleList	mem/memMgr.h	/^   ~MemRecycleList() { reset(); }$/;"	f	class:MemRecycleList
~MemTest	mem/memTest.h	/^   ~MemTest() {}$/;"	f	class:MemTest
~MemTestObj	mem/memTest.h	/^   ~MemTestObj() {}$/;"	f	class:MemTestObj
